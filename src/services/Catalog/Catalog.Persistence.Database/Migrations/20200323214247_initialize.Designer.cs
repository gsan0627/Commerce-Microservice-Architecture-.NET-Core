// <auto-generated />
using Catalog.Persistence.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Catalog.Persistence.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200323214247_initialize")]
    partial class initialize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Catalog")
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Catalog.Domain.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Description = "Description 1",
                            Name = "Product 1",
                            Price = 405m
                        },
                        new
                        {
                            ProductId = 2,
                            Description = "Description 2",
                            Name = "Product 2",
                            Price = 718m
                        },
                        new
                        {
                            ProductId = 3,
                            Description = "Description 3",
                            Name = "Product 3",
                            Price = 275m
                        },
                        new
                        {
                            ProductId = 4,
                            Description = "Description 4",
                            Name = "Product 4",
                            Price = 907m
                        },
                        new
                        {
                            ProductId = 5,
                            Description = "Description 5",
                            Name = "Product 5",
                            Price = 634m
                        },
                        new
                        {
                            ProductId = 6,
                            Description = "Description 6",
                            Name = "Product 6",
                            Price = 336m
                        },
                        new
                        {
                            ProductId = 7,
                            Description = "Description 7",
                            Name = "Product 7",
                            Price = 418m
                        },
                        new
                        {
                            ProductId = 8,
                            Description = "Description 8",
                            Name = "Product 8",
                            Price = 482m
                        },
                        new
                        {
                            ProductId = 9,
                            Description = "Description 9",
                            Name = "Product 9",
                            Price = 384m
                        },
                        new
                        {
                            ProductId = 10,
                            Description = "Description 10",
                            Name = "Product 10",
                            Price = 775m
                        });
                });

            modelBuilder.Entity("Catalog.Domain.ProductInStock", b =>
                {
                    b.Property<int>("ProductInStockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Stock")
                        .HasColumnType("float");

                    b.HasKey("ProductInStockId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("ProductInStockId");

                    b.ToTable("Stocks");

                    b.HasData(
                        new
                        {
                            ProductInStockId = 1,
                            ProductId = 1,
                            Stock = 36.0
                        },
                        new
                        {
                            ProductInStockId = 2,
                            ProductId = 2,
                            Stock = 35.0
                        },
                        new
                        {
                            ProductInStockId = 3,
                            ProductId = 3,
                            Stock = 1.0
                        },
                        new
                        {
                            ProductInStockId = 4,
                            ProductId = 4,
                            Stock = 7.0
                        },
                        new
                        {
                            ProductInStockId = 5,
                            ProductId = 5,
                            Stock = 34.0
                        },
                        new
                        {
                            ProductInStockId = 6,
                            ProductId = 6,
                            Stock = 4.0
                        },
                        new
                        {
                            ProductInStockId = 7,
                            ProductId = 7,
                            Stock = 14.0
                        },
                        new
                        {
                            ProductInStockId = 8,
                            ProductId = 8,
                            Stock = 22.0
                        },
                        new
                        {
                            ProductInStockId = 9,
                            ProductId = 9,
                            Stock = 41.0
                        },
                        new
                        {
                            ProductInStockId = 10,
                            ProductId = 10,
                            Stock = 35.0
                        });
                });

            modelBuilder.Entity("Catalog.Domain.ProductInStock", b =>
                {
                    b.HasOne("Catalog.Domain.Product", null)
                        .WithOne("Stock")
                        .HasForeignKey("Catalog.Domain.ProductInStock", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
